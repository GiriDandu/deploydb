plugins {
    id 'com.jfrog.bintray' version '1.0'
    id 'org.asciidoctor.gradle.asciidoctor' version '1.5.1'
    id 'com.github.johnrengelman.shadow' version '1.2.0'
    id "com.github.samueltbrown.cucumber" version "0.8"
}

apply plugin: 'groovy'
apply plugin: 'eclipse'

version = '0.1.0'
group = 'com.github.lookout'
description = 'DeployDB is a tool to provide a single source of truth for artifact-based deployments'

////////////////////////////////////////////////////////////////////////////////
// DEPENDENCY MANAGEMENT
////////////////////////////////////////////////////////////////////////////////

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.9+'

    [
     'dropwizard-core',
     'dropwizard-assets',
     'dropwizard-hibernate',
     'dropwizard-views-mustache',
     'dropwizard-testing',
     ].each {
        compile "io.dropwizard:${it}:0.7.1+"
    }

    compile 'io.dropwizard.modules:dropwizard-flyway:0.7.0-1'

    compile 'com.h2database:h2:1.3.+'

    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    testCompile 'cglib:cglib-nodep:2.2.+'

    cucumberCompile 'info.cukes:cucumber-groovy:1.2.+'
}

repositories {
    jcenter()
    mavenCentral()
}
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// TASKS
////////////////////////////////////////////////////////////////////////////////

cucumber {
    formats = ['pretty',
                // .toString() required here to make sure we convert a Groovy
                // string to a java.lang.String otherwise the underlying plugin
                // will explode
                "junit:${project.buildDir}/cucumber-results.xml".toString(),
                "html:docs/html5/restapi"]

    glueDirs = ['src/cucumber/groovy/step_definitions']
    featureDirs = ['features']
}
project.tasks.cucumber.doFirst {
    // NOTE: This hack exists because it appears that the cucumber gradle
    // plugin we're using does not properly create its own output dirs
    file("${buildDir}/resources/cucumber").mkdirs()
}
// The cucumber plugin makes the cucumber task depend on 'assemble' which is
// unnecessary and causes a cyclic task graph for the `shadowJar` task. We
// really just want to run our `cucumber` task under the `check` task and not
// require assembly
project.tasks.cucumber.dependsOn = project.tasks.cucumber.dependsOn.findAll {
    !((it instanceof ArrayList) && (it.get(0) == 'assemble'))
}
// Need a goofy way to refer to the task, see:
// https://github.com/samueltbrown/gradle-cucumber-plugin/issues/38
check.dependsOn project.tasks.cucumber


test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}


shadowJar {
    exclude 'META-INF/*.RSA', 'META-INF/*.DSA'
    manifest {
        attributes 'Main-Class' : 'deploydb.DeployDBApp'
    }

    // Only run after we've successfully completed our tests
    dependsOn check
}
assemble.dependsOn shadowJar
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// DOCUMENTATION TASKS
////////////////////////////////////////////////////////////////////////////////

asciidoctor {
    sourceDir 'src/asciidoc'
    outputDir 'docs'
    attributes 'toc': 'right',
                'source-highlighter': 'coderay',
                'toc-title': 'Table of Contents'
    shouldRunAfter test
}
check.dependsOn asciidoctor

groovydoc {
    destinationDir file('docs/html5/groovydoc')
    shouldRunAfter test
}
check.dependsOn groovydoc

////////////////////////////////////////////////////////////////////////////////
// PUBLISHING TASKS
////////////////////////////////////////////////////////////////////////////////

task publishDocs(type: Exec) {
    group 'Publishing'
    description 'Publish the Asciidoctor docs to gh-pages'
    commandLine 'git'
    args 'subtree', 'push', '--prefix', 'docs/html5', 'origin', 'gh-pages'
    dependsOn asciidoctor
}


bintray {
    user = project.bintrayUser
    key = project.bintrayKey
    publish = true
    dryRun = false
    configurations = ['archives']

    pkg {
        userOrg = 'lookout'
        repo = 'systems'
        name = 'DeployDB'
        labels = []

        version {
            name = project.version
            vcsTag = "v${project.version}"
            desc = project.description
        }
    }
}
bintrayUpload.dependsOn assemble
////////////////////////////////////////////////////////////////////////////////

eclipse {
    classpath {
        downloadSources = true
    }
}

// vim: ft=groovy
